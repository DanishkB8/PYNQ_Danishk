// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="am_accel_am_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.880000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=40,HLS_SYN_LUT=119,HLS_VERSION=2020_2}" *)

module am_accel (
        ap_clk,
        ap_rst_n,
        a_TDATA,
        a_TVALID,
        a_TREADY,
        a_TKEEP,
        a_TSTRB,
        a_TUSER,
        a_TLAST,
        a_TID,
        a_TDEST,
        b_TDATA,
        b_TVALID,
        b_TREADY,
        b_TKEEP,
        b_TSTRB,
        b_TUSER,
        b_TLAST,
        b_TID,
        b_TDEST,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] a_TDATA;
input   a_TVALID;
output   a_TREADY;
input  [3:0] a_TKEEP;
input  [3:0] a_TSTRB;
input  [1:0] a_TUSER;
input  [0:0] a_TLAST;
input  [4:0] a_TID;
input  [5:0] a_TDEST;
input  [31:0] b_TDATA;
input   b_TVALID;
output   b_TREADY;
input  [3:0] b_TKEEP;
input  [3:0] b_TSTRB;
input  [1:0] b_TUSER;
input  [0:0] b_TLAST;
input  [4:0] b_TID;
input  [5:0] b_TDEST;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [3:0] out_r_TKEEP;
output  [3:0] out_r_TSTRB;
output  [1:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [4:0] out_r_TID;
output  [5:0] out_r_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    a_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    b_TDATA_blk_n;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp1_last_V_reg_209;
wire   [31:0] tmp3_data_V_fu_183_p2;
reg    ap_block_state2;
wire    regslice_both_out_V_data_V_U_apdone_blk;
reg    ap_block_state3;
reg   [2:0] ap_NS_fsm;
wire    regslice_both_a_V_data_V_U_apdone_blk;
wire  signed [31:0] a_TDATA_int_regslice;
wire    a_TVALID_int_regslice;
reg    a_TREADY_int_regslice;
wire    regslice_both_a_V_data_V_U_ack_in;
wire    regslice_both_a_V_keep_V_U_apdone_blk;
wire   [3:0] a_TKEEP_int_regslice;
wire    regslice_both_a_V_keep_V_U_vld_out;
wire    regslice_both_a_V_keep_V_U_ack_in;
wire    regslice_both_a_V_strb_V_U_apdone_blk;
wire   [3:0] a_TSTRB_int_regslice;
wire    regslice_both_a_V_strb_V_U_vld_out;
wire    regslice_both_a_V_strb_V_U_ack_in;
wire    regslice_both_a_V_user_V_U_apdone_blk;
wire   [1:0] a_TUSER_int_regslice;
wire    regslice_both_a_V_user_V_U_vld_out;
wire    regslice_both_a_V_user_V_U_ack_in;
wire    regslice_both_a_V_last_V_U_apdone_blk;
wire   [0:0] a_TLAST_int_regslice;
wire    regslice_both_a_V_last_V_U_vld_out;
wire    regslice_both_a_V_last_V_U_ack_in;
wire    regslice_both_a_V_id_V_U_apdone_blk;
wire   [4:0] a_TID_int_regslice;
wire    regslice_both_a_V_id_V_U_vld_out;
wire    regslice_both_a_V_id_V_U_ack_in;
wire    regslice_both_a_V_dest_V_U_apdone_blk;
wire   [5:0] a_TDEST_int_regslice;
wire    regslice_both_a_V_dest_V_U_vld_out;
wire    regslice_both_a_V_dest_V_U_ack_in;
wire    regslice_both_b_V_data_V_U_apdone_blk;
wire  signed [31:0] b_TDATA_int_regslice;
wire    b_TVALID_int_regslice;
reg    b_TREADY_int_regslice;
wire    regslice_both_b_V_data_V_U_ack_in;
wire    regslice_both_b_V_keep_V_U_apdone_blk;
wire   [3:0] b_TKEEP_int_regslice;
wire    regslice_both_b_V_keep_V_U_vld_out;
wire    regslice_both_b_V_keep_V_U_ack_in;
wire    regslice_both_b_V_strb_V_U_apdone_blk;
wire   [3:0] b_TSTRB_int_regslice;
wire    regslice_both_b_V_strb_V_U_vld_out;
wire    regslice_both_b_V_strb_V_U_ack_in;
wire    regslice_both_b_V_user_V_U_apdone_blk;
wire   [1:0] b_TUSER_int_regslice;
wire    regslice_both_b_V_user_V_U_vld_out;
wire    regslice_both_b_V_user_V_U_ack_in;
wire    regslice_both_b_V_last_V_U_apdone_blk;
wire   [0:0] b_TLAST_int_regslice;
wire    regslice_both_b_V_last_V_U_vld_out;
wire    regslice_both_b_V_last_V_U_ack_in;
wire    regslice_both_b_V_id_V_U_apdone_blk;
wire   [4:0] b_TID_int_regslice;
wire    regslice_both_b_V_id_V_U_vld_out;
wire    regslice_both_b_V_id_V_U_ack_in;
wire    regslice_both_b_V_dest_V_U_apdone_blk;
wire   [5:0] b_TDEST_int_regslice;
wire    regslice_both_b_V_dest_V_U_vld_out;
wire    regslice_both_b_V_dest_V_U_ack_in;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire   [3:0] out_r_TKEEP_int_regslice;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire   [3:0] out_r_TSTRB_int_regslice;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_user_V_U_apdone_blk;
wire    regslice_both_out_V_user_V_U_ack_in_dummy;
wire    regslice_both_out_V_user_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;
wire    regslice_both_out_V_id_V_U_apdone_blk;
wire    regslice_both_out_V_id_V_U_ack_in_dummy;
wire    regslice_both_out_V_id_V_U_vld_out;
wire    regslice_both_out_V_dest_V_U_apdone_blk;
wire    regslice_both_out_V_dest_V_U_ack_in_dummy;
wire    regslice_both_out_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

am_accel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

am_accel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(b_TDATA_int_regslice),
    .din1(a_TDATA_int_regslice),
    .dout(tmp3_data_V_fu_183_p2)
);

am_accel_regslice_both #(
    .DataWidth( 32 ))
regslice_both_a_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TDATA),
    .vld_in(a_TVALID),
    .ack_in(regslice_both_a_V_data_V_U_ack_in),
    .data_out(a_TDATA_int_regslice),
    .vld_out(a_TVALID_int_regslice),
    .ack_out(a_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_V_data_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_a_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TKEEP),
    .vld_in(a_TVALID),
    .ack_in(regslice_both_a_V_keep_V_U_ack_in),
    .data_out(a_TKEEP_int_regslice),
    .vld_out(regslice_both_a_V_keep_V_U_vld_out),
    .ack_out(a_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_V_keep_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_a_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TSTRB),
    .vld_in(a_TVALID),
    .ack_in(regslice_both_a_V_strb_V_U_ack_in),
    .data_out(a_TSTRB_int_regslice),
    .vld_out(regslice_both_a_V_strb_V_U_vld_out),
    .ack_out(a_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_V_strb_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 2 ))
regslice_both_a_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TUSER),
    .vld_in(a_TVALID),
    .ack_in(regslice_both_a_V_user_V_U_ack_in),
    .data_out(a_TUSER_int_regslice),
    .vld_out(regslice_both_a_V_user_V_U_vld_out),
    .ack_out(a_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_V_user_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_a_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TLAST),
    .vld_in(a_TVALID),
    .ack_in(regslice_both_a_V_last_V_U_ack_in),
    .data_out(a_TLAST_int_regslice),
    .vld_out(regslice_both_a_V_last_V_U_vld_out),
    .ack_out(a_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_V_last_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 5 ))
regslice_both_a_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TID),
    .vld_in(a_TVALID),
    .ack_in(regslice_both_a_V_id_V_U_ack_in),
    .data_out(a_TID_int_regslice),
    .vld_out(regslice_both_a_V_id_V_U_vld_out),
    .ack_out(a_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_V_id_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 6 ))
regslice_both_a_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TDEST),
    .vld_in(a_TVALID),
    .ack_in(regslice_both_a_V_dest_V_U_ack_in),
    .data_out(a_TDEST_int_regslice),
    .vld_out(regslice_both_a_V_dest_V_U_vld_out),
    .ack_out(a_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_V_dest_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 32 ))
regslice_both_b_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(b_TDATA),
    .vld_in(b_TVALID),
    .ack_in(regslice_both_b_V_data_V_U_ack_in),
    .data_out(b_TDATA_int_regslice),
    .vld_out(b_TVALID_int_regslice),
    .ack_out(b_TREADY_int_regslice),
    .apdone_blk(regslice_both_b_V_data_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_b_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(b_TKEEP),
    .vld_in(b_TVALID),
    .ack_in(regslice_both_b_V_keep_V_U_ack_in),
    .data_out(b_TKEEP_int_regslice),
    .vld_out(regslice_both_b_V_keep_V_U_vld_out),
    .ack_out(b_TREADY_int_regslice),
    .apdone_blk(regslice_both_b_V_keep_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_b_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(b_TSTRB),
    .vld_in(b_TVALID),
    .ack_in(regslice_both_b_V_strb_V_U_ack_in),
    .data_out(b_TSTRB_int_regslice),
    .vld_out(regslice_both_b_V_strb_V_U_vld_out),
    .ack_out(b_TREADY_int_regslice),
    .apdone_blk(regslice_both_b_V_strb_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 2 ))
regslice_both_b_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(b_TUSER),
    .vld_in(b_TVALID),
    .ack_in(regslice_both_b_V_user_V_U_ack_in),
    .data_out(b_TUSER_int_regslice),
    .vld_out(regslice_both_b_V_user_V_U_vld_out),
    .ack_out(b_TREADY_int_regslice),
    .apdone_blk(regslice_both_b_V_user_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_b_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(b_TLAST),
    .vld_in(b_TVALID),
    .ack_in(regslice_both_b_V_last_V_U_ack_in),
    .data_out(b_TLAST_int_regslice),
    .vld_out(regslice_both_b_V_last_V_U_vld_out),
    .ack_out(b_TREADY_int_regslice),
    .apdone_blk(regslice_both_b_V_last_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 5 ))
regslice_both_b_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(b_TID),
    .vld_in(b_TVALID),
    .ack_in(regslice_both_b_V_id_V_U_ack_in),
    .data_out(b_TID_int_regslice),
    .vld_out(regslice_both_b_V_id_V_U_vld_out),
    .ack_out(b_TREADY_int_regslice),
    .apdone_blk(regslice_both_b_V_id_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 6 ))
regslice_both_b_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(b_TDEST),
    .vld_in(b_TVALID),
    .ack_in(regslice_both_b_V_dest_V_U_ack_in),
    .data_out(b_TDEST_int_regslice),
    .vld_out(regslice_both_b_V_dest_V_U_vld_out),
    .ack_out(b_TREADY_int_regslice),
    .apdone_blk(regslice_both_b_V_dest_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp3_data_V_fu_183_p2),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TKEEP_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TSTRB_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 2 ))
regslice_both_out_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TUSER_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_user_V_U_ack_in_dummy),
    .data_out(out_r_TUSER),
    .vld_out(regslice_both_out_V_user_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_user_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 5 ))
regslice_both_out_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TID_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_id_V_U_ack_in_dummy),
    .data_out(out_r_TID),
    .vld_out(regslice_both_out_V_id_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_id_V_U_apdone_blk)
);

am_accel_regslice_both #(
    .DataWidth( 6 ))
regslice_both_out_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TDEST_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_dest_V_U_ack_in_dummy),
    .data_out(out_r_TDEST),
    .vld_out(regslice_both_out_V_dest_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp1_last_V_reg_209 <= a_TLAST_int_regslice;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_TDATA_blk_n = a_TVALID_int_regslice;
    end else begin
        a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_r_TREADY_int_regslice == 1'b0) | (b_TVALID_int_regslice == 1'b0) | (1'b0 == a_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2))) begin
        a_TREADY_int_regslice = 1'b1;
    end else begin
        a_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_r_TREADY_int_regslice == 1'b0) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (tmp1_last_V_reg_209 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_r_TREADY_int_regslice == 1'b0) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (tmp1_last_V_reg_209 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_TDATA_blk_n = b_TVALID_int_regslice;
    end else begin
        b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_r_TREADY_int_regslice == 1'b0) | (b_TVALID_int_regslice == 1'b0) | (1'b0 == a_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2))) begin
        b_TREADY_int_regslice = 1'b1;
    end else begin
        b_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_r_TREADY_int_regslice == 1'b0) | (b_TVALID_int_regslice == 1'b0) | (1'b0 == a_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_r_TREADY_int_regslice == 1'b0) | (b_TVALID_int_regslice == 1'b0) | (1'b0 == a_TVALID_int_regslice)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_r_TREADY_int_regslice == 1'b0) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (tmp1_last_V_reg_209 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((out_r_TREADY_int_regslice == 1'b0) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (tmp1_last_V_reg_209 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_TREADY = regslice_both_a_V_data_V_U_ack_in;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2 = ((out_r_TREADY_int_regslice == 1'b0) | (b_TVALID_int_regslice == 1'b0) | (1'b0 == a_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state3 = ((out_r_TREADY_int_regslice == 1'b0) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_TREADY = regslice_both_b_V_data_V_U_ack_in;

assign out_r_TKEEP_int_regslice = (b_TKEEP_int_regslice & a_TKEEP_int_regslice);

assign out_r_TSTRB_int_regslice = (b_TSTRB_int_regslice & a_TSTRB_int_regslice);

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

endmodule //am_accel
