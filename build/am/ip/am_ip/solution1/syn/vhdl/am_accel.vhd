-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity am_accel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    a_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    a_TVALID : IN STD_LOGIC;
    a_TREADY : OUT STD_LOGIC;
    a_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    a_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    a_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    a_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    a_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    a_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    b_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    b_TVALID : IN STD_LOGIC;
    b_TREADY : OUT STD_LOGIC;
    b_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    b_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    b_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    b_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    b_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    b_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of am_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "am_accel_am_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5eg-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.880000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=40,HLS_SYN_LUT=119,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal b_TDATA_blk_n : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp1_last_V_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_data_V_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal regslice_both_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_a_V_data_V_U_apdone_blk : STD_LOGIC;
    signal a_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal a_TVALID_int_regslice : STD_LOGIC;
    signal a_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_a_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_a_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal a_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_a_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_a_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_a_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal a_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_a_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_a_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_a_V_user_V_U_apdone_blk : STD_LOGIC;
    signal a_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_a_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_a_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_a_V_last_V_U_apdone_blk : STD_LOGIC;
    signal a_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_a_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_a_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_a_V_id_V_U_apdone_blk : STD_LOGIC;
    signal a_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_a_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_a_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_a_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal a_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_a_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_a_V_dest_V_U_ack_in : STD_LOGIC;
    signal regslice_both_b_V_data_V_U_apdone_blk : STD_LOGIC;
    signal b_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal b_TVALID_int_regslice : STD_LOGIC;
    signal b_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_b_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_b_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal b_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_b_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_b_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_b_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal b_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_b_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_b_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_b_V_user_V_U_apdone_blk : STD_LOGIC;
    signal b_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_b_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_b_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_b_V_last_V_U_apdone_blk : STD_LOGIC;
    signal b_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_b_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_b_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_b_V_id_V_U_apdone_blk : STD_LOGIC;
    signal b_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_b_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_b_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_b_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal b_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_b_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_b_V_dest_V_U_ack_in : STD_LOGIC;
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal out_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal out_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component am_accel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component am_accel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component am_accel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component am_accel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_32s_32s_32_1_1_U1 : component am_accel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_TDATA_int_regslice,
        din1 => a_TDATA_int_regslice,
        dout => tmp3_data_V_fu_183_p2);

    regslice_both_a_V_data_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TDATA,
        vld_in => a_TVALID,
        ack_in => regslice_both_a_V_data_V_U_ack_in,
        data_out => a_TDATA_int_regslice,
        vld_out => a_TVALID_int_regslice,
        ack_out => a_TREADY_int_regslice,
        apdone_blk => regslice_both_a_V_data_V_U_apdone_blk);

    regslice_both_a_V_keep_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TKEEP,
        vld_in => a_TVALID,
        ack_in => regslice_both_a_V_keep_V_U_ack_in,
        data_out => a_TKEEP_int_regslice,
        vld_out => regslice_both_a_V_keep_V_U_vld_out,
        ack_out => a_TREADY_int_regslice,
        apdone_blk => regslice_both_a_V_keep_V_U_apdone_blk);

    regslice_both_a_V_strb_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TSTRB,
        vld_in => a_TVALID,
        ack_in => regslice_both_a_V_strb_V_U_ack_in,
        data_out => a_TSTRB_int_regslice,
        vld_out => regslice_both_a_V_strb_V_U_vld_out,
        ack_out => a_TREADY_int_regslice,
        apdone_blk => regslice_both_a_V_strb_V_U_apdone_blk);

    regslice_both_a_V_user_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TUSER,
        vld_in => a_TVALID,
        ack_in => regslice_both_a_V_user_V_U_ack_in,
        data_out => a_TUSER_int_regslice,
        vld_out => regslice_both_a_V_user_V_U_vld_out,
        ack_out => a_TREADY_int_regslice,
        apdone_blk => regslice_both_a_V_user_V_U_apdone_blk);

    regslice_both_a_V_last_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TLAST,
        vld_in => a_TVALID,
        ack_in => regslice_both_a_V_last_V_U_ack_in,
        data_out => a_TLAST_int_regslice,
        vld_out => regslice_both_a_V_last_V_U_vld_out,
        ack_out => a_TREADY_int_regslice,
        apdone_blk => regslice_both_a_V_last_V_U_apdone_blk);

    regslice_both_a_V_id_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TID,
        vld_in => a_TVALID,
        ack_in => regslice_both_a_V_id_V_U_ack_in,
        data_out => a_TID_int_regslice,
        vld_out => regslice_both_a_V_id_V_U_vld_out,
        ack_out => a_TREADY_int_regslice,
        apdone_blk => regslice_both_a_V_id_V_U_apdone_blk);

    regslice_both_a_V_dest_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TDEST,
        vld_in => a_TVALID,
        ack_in => regslice_both_a_V_dest_V_U_ack_in,
        data_out => a_TDEST_int_regslice,
        vld_out => regslice_both_a_V_dest_V_U_vld_out,
        ack_out => a_TREADY_int_regslice,
        apdone_blk => regslice_both_a_V_dest_V_U_apdone_blk);

    regslice_both_b_V_data_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => b_TDATA,
        vld_in => b_TVALID,
        ack_in => regslice_both_b_V_data_V_U_ack_in,
        data_out => b_TDATA_int_regslice,
        vld_out => b_TVALID_int_regslice,
        ack_out => b_TREADY_int_regslice,
        apdone_blk => regslice_both_b_V_data_V_U_apdone_blk);

    regslice_both_b_V_keep_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => b_TKEEP,
        vld_in => b_TVALID,
        ack_in => regslice_both_b_V_keep_V_U_ack_in,
        data_out => b_TKEEP_int_regslice,
        vld_out => regslice_both_b_V_keep_V_U_vld_out,
        ack_out => b_TREADY_int_regslice,
        apdone_blk => regslice_both_b_V_keep_V_U_apdone_blk);

    regslice_both_b_V_strb_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => b_TSTRB,
        vld_in => b_TVALID,
        ack_in => regslice_both_b_V_strb_V_U_ack_in,
        data_out => b_TSTRB_int_regslice,
        vld_out => regslice_both_b_V_strb_V_U_vld_out,
        ack_out => b_TREADY_int_regslice,
        apdone_blk => regslice_both_b_V_strb_V_U_apdone_blk);

    regslice_both_b_V_user_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => b_TUSER,
        vld_in => b_TVALID,
        ack_in => regslice_both_b_V_user_V_U_ack_in,
        data_out => b_TUSER_int_regslice,
        vld_out => regslice_both_b_V_user_V_U_vld_out,
        ack_out => b_TREADY_int_regslice,
        apdone_blk => regslice_both_b_V_user_V_U_apdone_blk);

    regslice_both_b_V_last_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => b_TLAST,
        vld_in => b_TVALID,
        ack_in => regslice_both_b_V_last_V_U_ack_in,
        data_out => b_TLAST_int_regslice,
        vld_out => regslice_both_b_V_last_V_U_vld_out,
        ack_out => b_TREADY_int_regslice,
        apdone_blk => regslice_both_b_V_last_V_U_apdone_blk);

    regslice_both_b_V_id_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => b_TID,
        vld_in => b_TVALID,
        ack_in => regslice_both_b_V_id_V_U_ack_in,
        data_out => b_TID_int_regslice,
        vld_out => regslice_both_b_V_id_V_U_vld_out,
        ack_out => b_TREADY_int_regslice,
        apdone_blk => regslice_both_b_V_id_V_U_apdone_blk);

    regslice_both_b_V_dest_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => b_TDEST,
        vld_in => b_TVALID,
        ack_in => regslice_both_b_V_dest_V_U_ack_in,
        data_out => b_TDEST_int_regslice,
        vld_out => regslice_both_b_V_dest_V_U_vld_out,
        ack_out => b_TREADY_int_regslice,
        apdone_blk => regslice_both_b_V_dest_V_U_apdone_blk);

    regslice_both_out_V_data_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp3_data_V_fu_183_p2,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_data_V_U_apdone_blk);

    regslice_both_out_V_keep_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TKEEP_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_keep_V_U_apdone_blk);

    regslice_both_out_V_strb_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TSTRB_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_strb_V_U_apdone_blk);

    regslice_both_out_V_user_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TUSER_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_user_V_U_ack_in_dummy,
        data_out => out_r_TUSER,
        vld_out => regslice_both_out_V_user_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_user_V_U_apdone_blk);

    regslice_both_out_V_last_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_last_V_U_apdone_blk);

    regslice_both_out_V_id_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TID_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_id_V_U_ack_in_dummy,
        data_out => out_r_TID,
        vld_out => regslice_both_out_V_id_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_id_V_U_apdone_blk);

    regslice_both_out_V_dest_V_U : component am_accel_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => a_TDEST_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_dest_V_U_ack_in_dummy,
        data_out => out_r_TDEST,
        vld_out => regslice_both_out_V_dest_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp1_last_V_reg_209 <= a_TLAST_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp1_last_V_reg_209, regslice_both_out_V_data_V_U_apdone_blk, a_TVALID_int_regslice, b_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (b_TVALID_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = a_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp1_last_V_reg_209 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp1_last_V_reg_209 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    a_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, a_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_TDATA_blk_n <= a_TVALID_int_regslice;
        else 
            a_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    a_TREADY <= regslice_both_a_V_data_V_U_ack_in;

    a_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, a_TVALID_int_regslice, b_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
        if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (b_TVALID_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = a_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_TREADY_int_regslice <= ap_const_logic_1;
        else 
            a_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(a_TVALID_int_regslice, b_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
                ap_block_state2 <= ((out_r_TREADY_int_regslice = ap_const_logic_0) or (b_TVALID_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = a_TVALID_int_regslice));
    end process;


    ap_block_state3_assign_proc : process(regslice_both_out_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state3 <= ((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, tmp1_last_V_reg_209, regslice_both_out_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp1_last_V_reg_209 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, tmp1_last_V_reg_209, regslice_both_out_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp1_last_V_reg_209 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    b_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, b_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_TDATA_blk_n <= b_TVALID_int_regslice;
        else 
            b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_TREADY <= regslice_both_b_V_data_V_U_ack_in;

    b_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, a_TVALID_int_regslice, b_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
        if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (b_TVALID_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = a_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_TREADY_int_regslice <= ap_const_logic_1;
        else 
            b_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, out_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TKEEP_int_regslice <= (b_TKEEP_int_regslice and a_TKEEP_int_regslice);
    out_r_TSTRB_int_regslice <= (b_TSTRB_int_regslice and a_TSTRB_int_regslice);
    out_r_TVALID <= regslice_both_out_V_data_V_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state2, a_TVALID_int_regslice, b_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
        if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (b_TVALID_int_regslice = ap_const_logic_0) or (ap_const_logic_0 = a_TVALID_int_regslice))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
